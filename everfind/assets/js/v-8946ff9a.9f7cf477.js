(self.webpackChunkeverfind=self.webpackChunkeverfind||[]).push([[121],{6265:(n,e,s)=>{"use strict";s.r(e),s.d(e,{data:()=>a});const a={key:"v-8946ff9a",path:"/solutions/micro-frontend/intro.html",title:"微前端架构调研与思考",lang:"zh-CN",frontmatter:{title:"微前端架构调研与思考",description:"微前端架构分析、服务端渲染、骨架屏方案",keywords:["micro frontend","微前端"],date:"2019-11-01T00:00:00.000Z",key:1,permalinkPattern:"solutions/micro-frontend/:slug.html",tags:["调研"]},excerpt:"",headers:[{level:2,title:"微前端架构",slug:"微前端架构",children:[{level:3,title:"single-spa",slug:"single-spa",children:[]},{level:3,title:"qiankun",slug:"qiankun",children:[]}]},{level:2,title:"服务端渲染",slug:"服务端渲染",children:[]},{level:2,title:"骨架屏",slug:"骨架屏",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],filePathRelative:"solutions/micro-frontend/intro.md"}},3861:(n,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>ln});var a=s(6252);const t=(0,a.Wm)("p",null,"目前，我们前端团队的业务主要在官网以及相关的用户中心、商城等系统中，每个系统都有独立的域名，通过刷新浏览器或者新开标签页的方式实现系统间的跳转，即 MPA 模式，MPA 模式的优点在于部署简单、各应用之间硬隔离，天生具备技术栈无关、独立开发、独立部署的特性。缺点也很明显，应用之间切换会造成浏览器重刷，由于产品域名之间相互跳转，流程体验上会存在断点。相较于 MAP 模式来说，SPA 天生具备体验上的优势，应用直接无刷新切换，能极大的保证多产品之间流程操作串联时的流程性。缺点则在于各应用技术栈之间是强耦合的。",-1),r=(0,a.Wm)("p",null,"有没有一种方式能够兼顾 MPA 和 SPA 两者的优势，从而构建出一个即保证应用具备独立开发权的同时，又能将它们整合到一起保证产品完整的流程体验的前端系统呢？微前端架构是一个可靠的答案。",-1),p=(0,a.Wm)("h2",{id:"微前端架构"},[(0,a.Wm)("a",{class:"header-anchor",href:"#微前端架构"},"#"),(0,a.Uk)(" 微前端架构")],-1),l=(0,a.Wm)("p",null,"微前端理念来源于后端微服务实践，希望在前端系统中，各个子应用能够做到，技术栈无关、独立开发、独立部署、应用运行时独立。",-1),o=(0,a.Uk)("目前社区里比较成体系的实践方案有 "),c={href:"https://github.com/CanopyTax/single-spa",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("single-spa"),i=(0,a.Uk)(" 以及在 single-spa 基础上开发的 "),k={href:"https://github.com/umijs/qiankun",target:"_blank",rel:"noopener noreferrer"},h=(0,a.Uk)("qiankun"),m=(0,a.Uk)("."),d=(0,a.uE)('<h3 id="single-spa"><a class="header-anchor" href="#single-spa">#</a> single-spa</h3><p>single-spa 的核心思路是将每个子应用都打包成一个独立的 js 文件，通过 <code>registerApplication</code> 这个接口来约定子应用与主框架的交互行为，比如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">registerApplication</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;angularJS&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">&#39;./src/angularJS/angularJS.app.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">pathPrefix</span><span class="token punctuation">(</span><span class="token string">&#39;/angularJS&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',3),g=(0,a.Uk)("定义了子应用名称为 'angularJS'，应用入口地址为 "),b=(0,a.Wm)("code",null,"'./src/angularJS/angularJS.app.js'",-1),f=(0,a.Uk)("，single-spa 通过 "),W={href:"https://github.com/systemjs/systemjs",target:"_blank",rel:"noopener noreferrer"},U=(0,a.Uk)("SystemJS"),y=(0,a.Uk)(" 来加载模块，当浏览器路径以 "),v=(0,a.Wm)("code",null,"'/angularJS'",-1),q=(0,a.Uk)(" 开头时加载子应用。同时，single-spa 还定义了应用的生命周期方法，子应用可以实现这些生命周期方法来做一些初始化和垃圾清理的操作。"),j=(0,a.uE)('<p>single-spa 实现了子应用技术栈无关、独立开发、独立部署的关键特性，在此基础上我们甚至可以基于几个子应用组合出一个新的应用出来，极大的提高了业务灵活性。但是 single-spa 也有不足的地方，比如把所有资源都打包到一个 js 文件里，包括 css 、图片等资源，会造成包体积庞大，且无法利用并行加载。另外还存在全局变量、监听污染、样式污染等问题，需要制定一个规范来约束接入的子应用。</p><h3 id="qiankun"><a class="header-anchor" href="#qiankun">#</a> qiankun</h3><p>qiankun 是蚂蚁金服在 single-spa 基础上开发的微服务框架，在 single-spa 的基础上增加了通过 html 加载子应用，子应用样式、js 运行环境隔离等特性。</p><h4 id="html-entry"><a class="header-anchor" href="#html-entry">#</a> html entry</h4><p>html entry 本质上是一个应用静态资源表，可以理解成如下形式：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;html&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;//xxx.yyy.com/index.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;css&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;//xxx.yyy.com/index.css&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>html entry 相较于 single-spa 的 js entry 而言更加灵活，可以直接将子应用打出来 html 作为入口，框架会将 HTML document 作为子节点塞到主框架的容器中。子应用接入成本几乎为零，开发体验与独立开发时保持不变。</p><h4 id="样式隔离"><a class="header-anchor" href="#样式隔离">#</a> 样式隔离</h4><p>由于微前端场景下，不同技术栈的子应用会被集成到同一个运行时中，子应用之间难免会出现样式互相干扰的问题，而且这种问题往往要等到非常后期才会被发现。样式隔离有两个思路，第一个是使用类似于 CSS Module 或者 BEM 的方案，本质上是通过约定来避免冲突，对于新项目来说，这种方案成本很低，但是如果涉及到与老项目一同运行，那改造成本将会非常高昂。第二个思路是在子应用卸载的时候同时卸载掉样式表。技术原理是浏览器会对所有的样式表的插入、移除做整个 CSSOM 的重构，从而达到 插入、卸载 样式的目的。这样即能保证，在一个时间点里，只有一个应用的样式表是生效的。</p>',9),S=(0,a.Uk)("qiankun 框架采用的是第二种思路，使用 "),P={href:"https://github.com/kuitos/import-html-entry",target:"_blank",rel:"noopener noreferrer"},x=(0,a.Uk)("import-html-entry"),A=(0,a.Uk)(" ，通过解析 html entry 中的 "),J=(0,a.Wm)("code",null,"<link>",-1),C=(0,a.Uk)(" 和 "),_=(0,a.Wm)("code",null,"<style>",-1),w=(0,a.Uk)(" 标签获取样式信息，下载样式文件，并最终以 "),E=(0,a.Wm)("code",null,"<style>",-1),M=(0,a.Uk)(" 标签的形式插入到主框架的容器中去，在子应用卸载时一并移除。"),O=(0,a.uE)('<h4 id="js-运行时沙箱"><a class="header-anchor" href="#js-运行时沙箱">#</a> js 运行时沙箱</h4><p>相较于样式隔离来说，js 隔离显得更为重要。因为在 SPA 的场景下，类似内存泄漏、全局变量冲突等问题的影响会被放大，可能某个子应用内的问题会影响到其他应用的运行。而且这种问题通常非常难以排查和定位，一旦发生，解决成本非常高。<br> qiankun 框架为每个子应用启用了一个沙箱环境，子应用内所有的 js 代码都是在这个沙箱环境中执行，不会影响到全局。</p><blockquote><p>qiankun 的沙箱环境基于 <code>Proxy</code> 实现，对浏览器有一定的要求，IE 无法兼容。 总体来说，微前端架构旨在解决单体应用过度庞大引起的开发维护困难的问题，将独立的子系统拆分出来，独立开发、独立部署，完成子系统间的解耦。同时也提供了将拆分出来的子应用重新组合成新应用的可能性。</p></blockquote><h2 id="服务端渲染"><a class="header-anchor" href="#服务端渲染">#</a> 服务端渲染</h2><p>微前端本质是 SPA 的技术方式，只能在客户端完成页面的渲染工作。目前，前端团队的项目里都是通过 jade 模板完成页面生成，UI 层使用 JQuery 完成交互。虽然技术栈比较老旧，但是用户体验与现在流行的服务端渲染框架是一致的。当采用微前端架构之后，原有的服务端模板不复存在，如何保证 SEO 等功能不丢失呢？</p>',5),T=(0,a.Uk)("单纯就 SEO 而言，可以通过为搜索引擎定制页面的形式，将预先渲染好的页面提供给搜索引擎。这块社区也有相关的技术方案，比较成熟的有 "),z={href:"https://prerender.io/",target:"_blank",rel:"noopener noreferrer"},D=(0,a.Uk)("prerender"),H=(0,a.Uk)("，还有 "),I={href:"https://github.com/GoogleChrome/puppeteer",target:"_blank",rel:"noopener noreferrer"},L=(0,a.Uk)("puppeteer"),B=(0,a.Uk)("。这两个方案本质上都是通过 CDP（Chrome Devtools Protocol）来控制 Chrome 浏览器。puppeteer 可定制化能力更强，可以阻断图片、样式等请求，已加快页面生成时间和节省服务端带宽。"),F=(0,a.Wm)("p",null,"如果我们希望通过服务端渲染解决首屏的性能和体验问题，那么单纯依靠 prerender 或者 puppeteer 来做服务端渲染就会比较粗糙，在某些场景下会对用户体验造成一定的影响。比如轮播图这样的组件，在完成服务端渲染后，会自动运行，这时候返回的 html 中轮播图可能是一个两张图片切换的过渡状态，对于用户来说会显得比较怪异。",-1),G=(0,a.Wm)("h2",{id:"骨架屏"},[(0,a.Wm)("a",{class:"header-anchor",href:"#骨架屏"},"#"),(0,a.Uk)(" 骨架屏")],-1),N=(0,a.Uk)("如果抛开服务端渲染，如何弥补 SPA 应用首屏用户体验缺失的问题呢？还有一种方案就是骨架屏。骨架屏的核心思路是通过展示占位元素的方式，减少用户在白屏时间内的焦虑感。 目前社区做骨架屏主要有两个思路，一个是手写骨架屏，react 和 vue 都有成熟的解决方案，比如 "),Q={href:"https://github.com/danilowoz/react-content-loader",target:"_blank",rel:"noopener noreferrer"},R=(0,a.Uk)("react-content-loader"),Y=(0,a.Uk)(" 和 "),Z={href:"https://github.com/egoist/vue-content-loader",target:"_blank",rel:"noopener noreferrer"},K=(0,a.Uk)("vue-content-loader"),V=(0,a.Uk)("。手写骨架屏的优势是与页面真实内容完全一致，用户体验最好，缺点是一旦页面发生变更需要同步修改骨架屏。"),X=(0,a.Uk)("第二个思路是通过预渲染的形式，预先获取页面信息，再对页面进行样式覆盖和结构精简，生成骨架屏。比较成体系的实践方式是饿了么前端基于 vue 和 webpack 做的"),$={href:"https://github.com/Jocs/jocs.github.io/issues/22",target:"_blank",rel:"noopener noreferrer"},nn=(0,a.Uk)("骨架屏自动化生成方案"),en=(0,a.Uk)("，使用了 "),sn={href:"https://github.com/ElemeFE/page-skeleton-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},an=(0,a.Uk)("page-skeleton-webpack-plugin"),tn=(0,a.Uk)(" 这个插件来做最终的骨架屏生成。"),rn=(0,a.Wm)("h2",{id:"小结"},[(0,a.Wm)("a",{class:"header-anchor",href:"#小结"},"#"),(0,a.Uk)(" 小结")],-1),pn=(0,a.Wm)("p",null,"微前端架构是一套不错的前端系统解耦方案，同时兼备了 SPA 的用户体验。对于纯客户端渲染带来的体验问题，可以通过骨架屏等方案来进行弥补。虽然在性能层面比服务端渲染略有损失，但是换来的是整体开发和运维成本的降低，同时也为多项目管理提供了新的思路。",-1),ln={render:function(n,e){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[t,r,p,l,(0,a.Wm)("p",null,[o,(0,a.Wm)("a",c,[u,(0,a.Wm)(s)]),i,(0,a.Wm)("a",k,[h,(0,a.Wm)(s)]),m]),d,(0,a.Wm)("p",null,[g,b,f,(0,a.Wm)("a",W,[U,(0,a.Wm)(s)]),y,v,q]),j,(0,a.Wm)("p",null,[S,(0,a.Wm)("a",P,[x,(0,a.Wm)(s)]),A,J,C,_,w,E,M]),O,(0,a.Wm)("p",null,[T,(0,a.Wm)("a",z,[D,(0,a.Wm)(s)]),H,(0,a.Wm)("a",I,[L,(0,a.Wm)(s)]),B]),F,G,(0,a.Wm)("p",null,[N,(0,a.Wm)("a",Q,[R,(0,a.Wm)(s)]),Y,(0,a.Wm)("a",Z,[K,(0,a.Wm)(s)]),V]),(0,a.Wm)("p",null,[X,(0,a.Wm)("a",$,[nn,(0,a.Wm)(s)]),en,(0,a.Wm)("a",sn,[an,(0,a.Wm)(s)]),tn]),rn,pn],64)}}}}]);